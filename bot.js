// dependencies
const { Telegraf, Markup } = require('telegraf');
require('dotenv').config();
// Products DATA
const catalogProductsData = require('./catalogProducts');
// chat saleChatId
const chatSaleDepartmentId = process.env.SALE_CHAT_ID;
//  the token from BotFather
const bot = new Telegraf(`${process.env.BOT_API}`);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();
// –§—É–Ω–∫—Ü–∏–∏ // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞
function showProduct(ctx, productIndex) {
  const products = catalogProductsData.products;

  if (products.length === 0) {
    return ctx.reply('üòî –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç');
  }

  let index = productIndex;
  if (index >= products.length) index = 0;
  if (index < 0) index = products.length - 1;

  const product = products[index];
  userStates.set(ctx.from.id, index);

  const escapedName = escapeMarkdown(product.name);
  const escapedSku = escapeMarkdown(product.sku);

  const caption = `üèóÔ∏è *${escapedName}*\n\n` +
    `üì¶ –ê—Ä—Ç–∏–∫—É–ª: ${escapedSku}\n` +
    `üí∞ –¶–µ–Ω–∞: ${product.price.toLocaleString('ru-RU')} —Ä—É–±.\n\n` +
    `‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ`;

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ –æ–±—ä–µ–∫—Ç
  const reply_markup = {
    inline_keyboard: [
      [
        { text: 'üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url: product.urlSite },
        { text: 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: `application_${product.sku}` }
      ],
      [
        { text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', callback_data: `prev_${index}` },
        { text: '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è', callback_data: `next_${index}` }
      ]
    ]
  };

  ctx.replyWithPhoto(product.urlSiteImage, {
    caption: caption,
    parse_mode: 'Markdown',
    reply_markup: reply_markup
  }).catch(err => {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ:', err);
    ctx.reply(caption, {
      parse_mode: 'Markdown',
      reply_markup: reply_markup
    });
  });
}
//–§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown —Å–∏–º–≤–æ–ª–æ–≤ 
function escapeMarkdown(text) {
  return text.replace(/([_*\[\]()~`>#+\-=|{}.!])/g, '\\$1');
}


// Basic command handler
bot.start((ctx) => {
  const welcomeText = `üöõ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏!\n\n` +
    `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–µ–π –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π.\n` +
    `–ù–∞–∂–º–∏—Ç–µ /catalog —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã`;

  ctx.reply(welcomeText, Markup.keyboard([
    ['üì¶ –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥'],
    ['üåê –ù–∞—à —Å–∞–π—Ç', 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã']
  ]).resize());
});

// –ö–æ–º–∞–Ω–¥–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
bot.command('catalog', (ctx) => {
  showProduct(ctx, 0);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.hears('üì¶ –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥', (ctx) => {
  showProduct(ctx, 0);
});

bot.hears('üåê –ù–∞—à —Å–∞–π—Ç', (ctx) => {
  ctx.reply('üåê –ù–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç: https://gkvertikal.ru');
});

bot.hears('üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', (ctx) => {
  ctx.reply('üìû –î–ª—è —Å–≤—è–∑–∏:\n–¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\nEmail: info@gkvertikal.ru');
});




// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
bot.command('info', (ctx) => {
  const productCount = catalogProductsData.products.length;
  ctx.reply(`üìä –í –∫–∞—Ç–∞–ª–æ–≥–µ: ${productCount} —Ç–æ–≤–∞—Ä–æ–≤\n\n` +
    `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /catalog –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞`);
});

// Echo command (–æ—Å—Ç–∞–≤–ª—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
bot.command('echo', (ctx) => {
  const message = ctx.message.text.split(' ').slice(1).join(' ');
  ctx.reply(message || 'Please provide text to echo');
});

bot.command('links', (ctx) => {
  ctx.reply('–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:', Markup.inlineKeyboard([
    [Markup.button.url('üåê –ù–∞—à —Å–∞–π—Ç', 'https://gkvertikal.ru')],
    [Markup.button.url('üåê –°–∞–π—Ç zoomlion', 'https://zoomlion.gkvertikal.ru')]
  ]));
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
bot.action(/prev_(\d+)/, (ctx) => {
  const currentIndex = parseInt(ctx.match[1]);
  showProduct(ctx, currentIndex - 1);
  ctx.answerCbQuery();
});

bot.action(/next_(\d+)/, (ctx) => {
  const currentIndex = parseInt(ctx.match[1]);
  showProduct(ctx, currentIndex + 1);
  ctx.answerCbQuery();
});

bot.action(/application_(.+)/, async (ctx) => {
  try {
    const sku = ctx.match[1];
    const product = catalogProductsData.products.find(p => p.sku === sku);

    if (!product) {
      await ctx.answerCbQuery('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É –ø—Ä–æ–¥–∞–∂
    try {
      await bot.telegram.getChat(process.env.SALE_CHAT_ID);
    } catch (error) {
      console.error('–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –ø—Ä–æ–¥–∞–∂');
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = ctx.from;
    const username = user.username ? `@${user.username}` : '–Ω–µ —É–∫–∞–∑–∞–Ω';
    const firstName = user.first_name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
    const messageText = `
üéØ *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –¢–û–í–ê–†*

*üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:*
‚Ä¢ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: ${escapeMarkdown(product.name)}
‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª: ${escapeMarkdown(product.sku)}
‚Ä¢ –¶–µ–Ω–∞: ${product.price.toLocaleString('ru-RU')} —Ä—É–±.
‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç–µ: ${product.urlSite}

*üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:*
‚Ä¢ –ò–º—è: ${escapeMarkdown(firstName)}
‚Ä¢ Username: ${username}
‚Ä¢ User ID: ${user.id}

*üîó –°—Å—ã–ª–∫–∏ –¥–ª—è —Å–≤—è–∑–∏:*
${username !== '–Ω–µ —É–∫–∞–∑–∞–Ω' ? `‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram: https://t.me/${user.username}` : '‚Ä¢ Telegram: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: ${product.urlSite}

*‚è∞ –í—Ä–µ–º—è –∑–∞—è–≤–∫–∏:* ${new Date().toLocaleString('ru-RU')}
    `.trim();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –ø—Ä–æ–¥–∞–∂
    await bot.telegram.sendMessage(
      process.env.SALE_CHAT_ID,
      messageText,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üìû –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É',
                url: `https://t.me/${user.username}`
              },
              {
                text: 'üåê –û—Ç–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∞–π—Ç–µ',
                url: product.urlSite
              }
            ],
          ]
        }
      }
    );

    await ctx.answerCbQuery('‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º');

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});


// Handle text messages (fallback)
bot.on('text', (ctx) => {
  ctx.reply(`–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /catalog –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ /help –¥–ª—è –ø–æ–º–æ—â–∏`);
});

// Error handling
bot.catch((err, ctx) => {
  console.error(`Error for ${ctx.updateType}`, err);
  ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

// Launch the bot
bot.launch().then(async () => {
  console.log('Bot is running!');
  console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${catalogProductsData.products.length}`);
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –ø—Ä–æ–¥–∞–∂
  try {
    const chat = await bot.telegram.getChat(SALES_CHAT_ID);
    console.log(`‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —á–∞—Ç—É: ${chat.title}`);
  } catch (error) {

  }
});

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–º–æ—â–∏
bot.help((ctx) => {
  ctx.reply(
    `ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n` +
    `/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n` +
    `/catalog - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤\n` +
    `/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–∞–ª–æ–≥–µ\n` +
    `/links - –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏\n\n` +
    `–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é!`
  );
});