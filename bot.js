// dependencies
const { Telegraf, Markup } = require('telegraf');
require('dotenv').config();
const fs = require('fs').promises;
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  ADMIN_IDS: process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => id.trim()) : [],
  BOT_API: process.env.BOT_API,
  SALE_CHAT_ID: process.env.SALE_CHAT_ID,
  CHANNEL_ID: process.env.CHANNEL_ID,
  ALLOWED_FILE_TYPES: ['application/json', 'text/plain'],
  MANAGERS: {
    'moscow': [
      {
        username: process.env.MOSCOW_MANAGER_USERNAME_1 || '@manager_msk1',
        chatId: process.env.MOSCOW_MANAGER_CHAT_ID_1
      },
    ],
    'petersburg': [
      {
        username: process.env.PETERSBURG_MANAGER_USERNAME_1 || '@manager_spb1',
        chatId: process.env.PETERSBURG_MANAGER_CHAT_ID_1
      },
    ],
    'rostov': [
      {
        username: process.env.ROSTOV_MANAGER_USERNAME_1 || '@manager_rostov',
        chatId: process.env.ROSTOV_MANAGER_CHAT_ID_1
      },
    ],
    'sochi': [
      {
        username: process.env.SOCHI_MANAGER_USERNAME_1 || '@manager_sochi1',
        chatId: process.env.SOCHI_MANAGER_CHAT_ID_1
      },
    ],
    'simferopl': [
      {
        username: process.env.SIMFEROPL_MANAGER_USERNAME_1 || '@manager_simferopl1',
        chatId: process.env.SIMFEROPL_MANAGER_CHAT_ID_1
      },
    ],
    'ekaterinburg': [
      {
        username: process.env.EKB_MANAGER_USERNAME_1 || '@manager_ekb1',
        chatId: process.env.EKB_MANAGER_CHAT_ID_1
      },
    ],
    'kazan': [
      {
        username: process.env.KAZAN_MANAGER_USERNAME_1 || '@manager_kazan1',
        chatId: process.env.KAZAN_MANAGER_CHAT_ID_1
      },
    ],

    'other': [
      {
        username: process.env.GENERAL_MANAGER_USERNAME_1 || '@general_manager1',
        chatId: process.env.GENERAL_MANAGER_CHAT_ID_1
      },
    ]
  },

};

// –î–∞–Ω–Ω—ã–µ
const catalogProductsData = require('./catalogProducts');
let adminPosts = { posts: [] };

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤
async function loadPosts() {
  try {
    const postsPath = path.join(__dirname, 'post/adminPosts.json');
    const data = await fs.readFile(postsPath, 'utf8');
    adminPosts = JSON.parse(data);
  } catch (error) {
    console.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ø–æ—Å—Ç–æ–≤');
    adminPosts = { posts: [] };
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(CONFIG.BOT_API);

// –•—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
const userStates = new Map();
const userRegions = new Map();
const adminStates = new Map();

// –£—Ç–∏–ª–∏—Ç—ã
const utils = {
  escapeHtml: (text) => {
    if (!text) return '';
    return text.toString()
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#039;');
  },

  escapeMarkdown: (text) => {
    if (!text) return '';
    return text.toString()
      .replace(/\_/g, '\\_')
      .replace(/\*/g, '\\*')
      .replace(/\[/g, '\\[')
      .replace(/\]/g, '\\]')
      .replace(/\(/g, '\\(')
      .replace(/\)/g, '\\)')
      .replace(/\~/g, '\\~')
      .replace(/\`/g, '\\`')
      .replace(/\>/g, '\\>')
      .replace(/\#/g, '\\#')
      .replace(/\+/g, '\\+')
      .replace(/\-/g, '\\-')  // ‚Üê –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ñ–∏—Å–∞
      .replace(/\=/g, '\\=')
      .replace(/\|/g, '\\|')
      .replace(/\{/g, '\\{')
      .replace(/\}/g, '\\}')
      .replace(/\./g, '\\.')
      .replace(/\!/g, '\\!');
  },

  getRegionName: (regionCode) => {
    const regions = {
      'moscow': '–ú–æ—Å–∫–≤–∞',
      'petersburg': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
      'rostov': '–†–æ—Å—Ç–æ–≤',
      'sochi': '–°–æ—á–∏',
      'simferopl': '–°–∏–º—Ñ–µ—Ä–æ–ø–ª—å',
      'ekaterinburg': '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
      'kazan': '–ö–∞–∑–∞–Ω—å',
      'other': '–î—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω'
    };
    return regions[regionCode] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω';
  },

  getManagerMentions: (region) => {
    const regionManagers = CONFIG.MANAGERS[region] || CONFIG.MANAGERS.other;
    return regionManagers.map(manager => manager.username).join(' ');
  },


  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  formatCategoryName: (category) => {
    const categoryMap = {
      '–°–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞': 'üöú –°–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞',
      '–ó–∞–ø—á–∞—Å—Ç–∏': 'üîß –ó–∞–ø—á–∞—Å—Ç–∏'
      // –¥–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –º–∞–ø–ø–∏–Ω–≥–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    };

    return categoryMap[category] || category;
  },
  isAdmin: (userId) => CONFIG.ADMIN_IDS.includes(userId.toString())
};

// –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
bot.use(async (ctx, next) => {
  const userId = ctx.from.id;
  const state = adminStates.get(userId);

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç
  if (state && state.step === 'waiting_for_catalog_file' && ctx.message && ctx.message.document) {
    await handleCatalogUpload(ctx);
    return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–µ–ø–æ—á–∫—É middleware
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ –∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç
  if (state && state.step === 'waiting_for_text' && ctx.message && ctx.message.text) {
    await handlePostText(ctx);
    return;
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –ø–æ—Å—Ç–∞
  if (state && state.step === 'waiting_for_photo') {
    if (ctx.message && ctx.message.photo) {
      await handlePhotoUpload(ctx);
      return;
    } else if (ctx.message && ctx.message.text && ctx.message.text.toLowerCase() === '–Ω–µ—Ç') {
      await createTextPost(ctx, state.text);
      return;
    }
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç
  if (state && state.step === 'waiting_for_broadcast' && ctx.message && ctx.message.text) {
    await handleBroadcast(ctx);
    return;
  }

  // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
  await next();
});

// –í—ã–Ω–æ—Å–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function handleCatalogUpload(ctx) {
  if (!utils.isAdmin(ctx.from.id)) return;

  const document = ctx.message.document;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
  if (!CONFIG.ALLOWED_FILE_TYPES.includes(document.mime_type)) {
    return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON —Ñ–∞–π–ª.');
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
    const fileLink = await ctx.telegram.getFileLink(document.file_id);
    const response = await fetch(fileLink);
    const jsonData = await response.json();

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!jsonData.products || !Array.isArray(jsonData.products)) {
      return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON. –û–∂–∏–¥–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ products');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    for (const product of jsonData.products) {
      if (!product.sku || !product.name || !product.price || !product.urlSite || !product.urlSiteImage) {
        return ctx.reply('‚ùå –í JSON –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (sku, name, price, urlSite, urlSiteImage)');
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JS —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
    const catalogPath = path.join(__dirname, 'catalogProducts.js');
    const jsContent = `const catalogProductsData = ${JSON.stringify(jsonData, null, 2)};\n\nmodule.exports = catalogProductsData;`;

    await fs.writeFile(catalogPath, jsContent);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    catalogProductsData.products = jsonData.products;

    adminStates.delete(ctx.from.id);
    ctx.reply(`‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω! –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${jsonData.products.length}`);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: ' + error.message);
  }
}

async function handlePostText(ctx) {
  if (!utils.isAdmin(ctx.from.id)) return;

  adminStates.set(ctx.from.id, {
    step: 'waiting_for_photo',
    text: ctx.message.text
  });

  ctx.reply('‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–Ω–µ—Ç" –µ—Å–ª–∏ –±–µ–∑ —Ñ–æ—Ç–æ):');
}

async function handlePhotoUpload(ctx) {
  if (!utils.isAdmin(ctx.from.id)) return;

  const state = adminStates.get(ctx.from.id);

  if (state && state.step === 'waiting_for_photo') {
    const photo = ctx.message.photo[ctx.message.photo.length - 1];
    const fileId = photo.file_id;

    try {
      const newPost = await postService.createPost({
        text: state.text,
        photo: fileId,
        createdBy: ctx.from.username || ctx.from.first_name
      });

      adminStates.delete(ctx.from.id);

      ctx.replyWithPhoto(fileId, {
        caption: `‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω! –°—Ç–∞—Ç—É—Å: —á–µ—Ä–Ω–æ–≤–∏–∫\n\nID: ${newPost.id}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /publish_${newPost.id} –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏`
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ —Å —Ñ–æ—Ç–æ:', error);
      ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞');
    }
  }
}

//
// –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–∞–º–∏
//
const postService = {
  async savePosts() {
    try {
      const postsDir = path.join(__dirname, 'post');
      try {
        await fs.access(postsDir);
      } catch {
        await fs.mkdir(postsDir, { recursive: true });
      }

      await fs.writeFile(
        path.join(postsDir, 'adminPosts.json'),
        JSON.stringify(adminPosts, null, 2)
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å—Ç—ã');
    }
  },

  async createPost(postData) {
    const newPost = {
      id: Date.now(),
      ...postData,
      createdAt: new Date().toISOString(),
      status: 'draft'
    };

    adminPosts.posts.push(newPost);
    await this.savePosts();
    return newPost;
  },

  async updatePost(postId, updates) {
    const post = adminPosts.posts.find(p => p.id === postId);
    if (!post) throw new Error('–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');

    Object.assign(post, updates);
    await this.savePosts();
    return post;
  },
  async deletePost(postId) {
    const index = adminPosts.posts.findIndex(p => p.id === postId);
    if (index === -1) throw new Error('–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');

    adminPosts.posts.splice(index, 1);
    await this.savePosts();
  },

  getPostStats() {
    const total = adminPosts.posts.length;
    const published = adminPosts.posts.filter(p => p.status === 'published').length;
    const drafts = adminPosts.posts.filter(p => p.status === 'draft').length;

    return { total, published, drafts };
  },

  findPost(postId) {
    return adminPosts.posts.find(p => p.id === postId);
  }
};
//
// –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
//
const productService = {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  getAllCategories() {
    const categories = [...new Set(catalogProductsData.products.map(item => item.category))];
    return categories.sort();
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  getProductsByCategory(category) {
    return catalogProductsData.products.filter(item => item.category === category);
  },

  // –ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
  showProduct(ctx, category, productIndex) {
    const products = this.getProductsByCategory(category);

    if (products.length === 0) {
      return ctx.reply('üòî –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤');
    }

    let index = productIndex;
    if (index >= products.length) index = 0;
    if (index < 0) index = products.length - 1;

    const product = products[index];

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userStates.set(ctx.from.id, {
      category: category,
      index: index,
      total: products.length
    });

    const escapedName = utils.escapeMarkdown(product.name);

    const caption = `üèóÔ∏è *${escapedName}*\n\n` +
      `üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${utils.escapeMarkdown(product.category)}\n` +
      `üí∞ –¶–µ–Ω–∞: ${product.price.toLocaleString('ru-RU')} —Ä—É–±.\n\n` +
      `‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ`;

    const navigationButtons = [];

    if (products.length > 1) {
      if (index > 0) {
        navigationButtons.push({
          text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
          callback_data: `nav_${category}_${index - 1}`
        });
      }

      navigationButtons.push({
        text: `${index + 1}/${products.length}`,
        callback_data: 'page_info'
      });

      if (index < products.length - 1) {
        navigationButtons.push({
          text: '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è',
          callback_data: `nav_${category}_${index + 1}`
        });
      }
    }

    const reply_markup = {
      inline_keyboard: [
        [
          { text: 'üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url: product.urlSite },
          { text: 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: `application_${product.sku}` }
        ],
        navigationButtons,
        [
          { text: '‚Ü©Ô∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', callback_data: 'back_to_categories' }
        ]
      ]
    };

    ctx.replyWithPhoto(product.urlSiteImage, {
      caption: caption,
      parse_mode: 'Markdown',
      reply_markup: reply_markup
    }).catch(err => {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ:', err);
      ctx.reply(caption, {
        parse_mode: 'Markdown',
        reply_markup: reply_markup
      });
    });
  },

  // –ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  showCategories: async function (ctx, page = 0, itemsPerPage = 8) {
    const categories = this.getAllCategories(); // –¢–µ–ø–µ—Ä—å this –±—É–¥–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º

    if (categories.length === 0) {
      return ctx.reply('üòî –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    const totalPages = Math.ceil(categories.length / itemsPerPage);
    const startIndex = page * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const currentCategories = categories.slice(startIndex, endIndex);

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ø–æ 2 –≤ —Ä—è–¥)
    const categoryButtons = [];
    for (let i = 0; i < currentCategories.length; i += 2) {
      const row = [];
      if (currentCategories[i]) {
        row.push({
          text: utils.formatCategoryName(currentCategories[i]),
          callback_data: `category_${currentCategories[i]}_0`
        });
      }
      if (currentCategories[i + 1]) {
        row.push({
          text: utils.formatCategoryName(currentCategories[i + 1]),
          callback_data: `category_${currentCategories[i + 1]}_0`
        });
      }
      categoryButtons.push(row);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const navigationButtons = [];

    if (page > 0) {
      navigationButtons.push({
        text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
        callback_data: `categories_page_${page - 1}`
      });
    }

    navigationButtons.push({
      text: `${page + 1}/${totalPages}`,
      callback_data: 'categories_info'
    });

    if (page < totalPages - 1) {
      navigationButtons.push({
        text: '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è',
        callback_data: `categories_page_${page + 1}`
      });
    }

    if (navigationButtons.length > 0) {
      categoryButtons.push(navigationButtons);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
    categoryButtons.push([{ text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'close_catalog' }]);

    const messageText = `üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1}/${totalPages}):`;

    // –ï—Å–ª–∏ —ç—Ç–æ callback query (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É) –∏ –µ—Å—Ç—å message
    if (ctx.update.callback_query && ctx.update.callback_query.message) {
      const message = ctx.update.callback_query.message;

      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.editMessageText(messageText, {
          reply_markup: {
            inline_keyboard: categoryButtons
          }
        });
        return;
      } catch (editError) {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ), 
        // —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
        try {
          await ctx.deleteMessage();
        } catch (deleteError) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
        }
      }
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    return ctx.reply(messageText, {
      reply_markup: {
        inline_keyboard: categoryButtons
      }
    });
  },

  findProductBySku(sku) {
    return catalogProductsData.products.find(p => p.sku === sku);
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞
const catalogHandlers = {
  // –ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  showCatalog: (ctx) => {
    productService.showCategories(ctx, 0);
  },

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  handleCategoriesPage: async (ctx) => {
    try {
      const page = parseInt(ctx.match[1]);
      await productService.showCategories(ctx, page);
      await ctx.answerCbQuery();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.answerCbQuery('‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');
      await productService.showCategories(ctx, parseInt(ctx.match[1]));
    }
  },

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  handleCategoriesInfo: (ctx) => {
    ctx.answerCbQuery('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
  },

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  handleCategorySelect: (ctx) => {
    const category = ctx.match[1];
    const productIndex = parseInt(ctx.match[2]);

    productService.showProduct(ctx, category, productIndex);
    ctx.answerCbQuery();
  },

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ç–æ–≤–∞—Ä–∞–º
  handleNavigation: (ctx) => {
    const category = ctx.match[1];
    const productIndex = parseInt(ctx.match[2]);

    productService.showProduct(ctx, category, productIndex);
    ctx.answerCbQuery();
  },
  // –í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  handleBackToCategories: async (ctx) => {
    try {
      // –í–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (ctx.update.callback_query && ctx.update.callback_query.message) {
        const message = ctx.update.callback_query.message;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (—ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–æ–º)
        if (message.photo) {
          // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
          try {
            await ctx.deleteMessage();
          } catch (deleteError) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "message to delete not found"
            if (deleteError.response && deleteError.response.error_code === 400 &&
              deleteError.response.description.includes('message to delete not found')) {
              console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
            } else {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', deleteError);
            }
          }
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          await productService.showCategories(ctx, 0);
        } else {
          // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
          try {
            await productService.showCategories(ctx, 0);
          } catch (editError) {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', editError);
            await productService.showCategories(ctx, 0);
          }
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è callback_query, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await productService.showCategories(ctx, 0);
      }

      await ctx.answerCbQuery();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ handleBackToCategories:', error);

      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      try {
        await ctx.reply('üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'back_to_categories' }],
              [{ text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'close_catalog' }]
            ]
          }
        });
      } catch (fallbackError) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å fallback —Å–æ–æ–±—â–µ–Ω–∏–µ:', fallbackError);
      }

      await ctx.answerCbQuery('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  },

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞
  handleCloseCatalog: (ctx) => {
    if (ctx.update.callback_query && ctx.update.callback_query.message) {
      ctx.deleteMessage().catch(console.error);
    }
    ctx.answerCbQuery('–ö–∞—Ç–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç');
  },

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  handlePageInfo: (ctx) => {
    ctx.answerCbQuery('–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞');
  }
};
//
// –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
//
const subscriptionService = {
  usersFilePath: path.join(__dirname, 'broadcast', 'users.json'),

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
  async loadUsers() {
    try {
      const data = await fs.readFile(this.usersFilePath, 'utf8');
      return JSON.parse(data);
    } catch (error) {
      console.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      return { users: [] };
    }
  },

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
  async saveUsers(usersData) {
    try {
      const broadcastDir = path.join(__dirname, 'broadcast');
      try {
        await fs.access(broadcastDir);
      } catch {
        await fs.mkdir(broadcastDir, { recursive: true });
      }

      await fs.writeFile(this.usersFilePath, JSON.stringify(usersData, null, 2));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async subscribeUser(userId, username = '', firstName = '', lastName = '') {
    try {
      const usersData = await this.loadUsers();
      const existingUserIndex = usersData.users.findIndex(user => user.id === userId);

      if (existingUserIndex !== -1) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        usersData.users[existingUserIndex] = {
          ...usersData.users[existingUserIndex],
          subscribe: true,
          username: username || usersData.users[existingUserIndex].username,
          firstName: firstName || usersData.users[existingUserIndex].firstName,
          lastName: lastName || usersData.users[existingUserIndex].lastName,
          updatedAt: new Date().toISOString()
        };
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        usersData.users.push({
          id: userId,
          subscribe: true,
          username: username,
          firstName: firstName,
          lastName: lastName,
          subscribedAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        });
      }

      await this.saveUsers(usersData);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return false;
    }
  },

  // –û—Ç–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async unsubscribeUser(userId) {
    try {
      const usersData = await this.loadUsers();
      const userIndex = usersData.users.findIndex(user => user.id === userId);

      if (userIndex !== -1) {
        usersData.users[userIndex].subscribe = false;
        usersData.users[userIndex].updatedAt = new Date().toISOString();
        await this.saveUsers(usersData);
      }

      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return false;
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async getSubscribedUsers() {
    try {
      const usersData = await this.loadUsers();
      return usersData.users.filter(user => user.subscribe === true);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      return [];
    }
  },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async isUserSubscribed(userId) {
    try {
      const usersData = await this.loadUsers();
      const user = usersData.users.find(user => user.id === userId);
      return user ? user.subscribe : false;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      return false;
    }
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
async function createTextPost(ctx, text) {
  try {
    const newPost = await postService.createPost({
      text: text,
      createdBy: ctx.from.username || ctx.from.first_name
    });

    adminStates.delete(ctx.from.id);
    ctx.reply(`‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω (–±–µ–∑ —Ñ–æ—Ç–æ)! –°—Ç–∞—Ç—É—Å: —á–µ—Ä–Ω–æ–≤–∏–∫\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /publish_${newPost.id} –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:', error);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userHandlers = {
  start: async (ctx) => {
    const user = ctx.from;

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–¥–ø–∏—Å–∫–∏
    const subscribed = await subscriptionService.subscribeUser(
      user.id,
      user.username,
      user.first_name,
      user.last_name
    );

    const subscriptionStatus = subscribed ?
      '‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É' :
      '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É';

   const welcomeText = `üèóÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ì–ö ¬´–í–ï–†–¢–ò–ö–ê–õ–¨¬ª ‚Äî –≤–∞—à–µ–≥–æ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ –º–∏—Ä–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏, –∑–∞–ø—á–∞—Å—Ç–µ–π –∏ —Å–µ—Ä–≤–∏—Å–∞!\n\n` +
      `${subscriptionStatus}\n\n` +

      `–í —ç—Ç–æ–º –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ:\n` +
      `‚Ä¢ üìñ –ò–∑—É—á–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏ –∏ –∑–∞–ø—á–∞—Å—Ç–µ–π\n` +
      `‚Ä¢ üîç –£–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏ –Ω–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–µ\n` +
      `‚Ä¢ üõ†Ô∏è –£–∑–Ω–∞—Ç—å –æ–± —É—Å–ª—É–≥–∞—Ö —Å–µ—Ä–≤–∏—Å–∞ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è\n` +
      `‚Ä¢ üì© –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n` +
      `‚Ä¢ ‚úÖ –°–ª–µ–¥–∏—Ç—å –∑–∞ –∞–∫—Ü–∏—è–º–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏\n\n` +

      `‚û°Ô∏è –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ /catalog\n` +
      `‚ùì –í–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏? –ö–æ–º–∞–Ω–¥–∞ /help –≤—Å–µ–≥–¥–∞ –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º.\n\n` +

      `‚ÑπÔ∏è –í—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é –±–æ—Ç–∞.`;

    ctx.reply(welcomeText, Markup.keyboard([
      ['üì¶ –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥'],
      ['üåê –ù–∞—à —Å–∞–π—Ç', 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã'],
      ['‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏']
    ]).resize());
  },

  showCatalog: (ctx) => {
    catalogHandlers.showCatalog(ctx);
  },

  showWebsite: (ctx) => {
    ctx.reply('üåê –ù–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç: https://gkvertikal.ru');
  },

  showContacts: (ctx) => {
    ctx.reply('üìû –î–ª—è —Å–≤—è–∑–∏:\n–¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\nEmail: info@gkvertikal.ru');
  },


  showInfo: (ctx) => {
    const productCount = catalogProductsData.products.length;
    ctx.reply(`üìä –í –∫–∞—Ç–∞–ª–æ–≥–µ: ${productCount} —Ç–æ–≤–∞—Ä–æ–≤\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /catalog –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞`);
  },

  showLinks: (ctx) => {
    ctx.reply('–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:', Markup.inlineKeyboard([
      [Markup.button.url('üåê –ù–∞—à —Å–∞–π—Ç', 'https://gkvertikal.ru')],
      [Markup.button.url('üåê –°–∞–π—Ç zoomlion', 'https://zoomlion.gkvertikal.ru')]
    ]));
  },

  showId: (ctx) => {
    const user = ctx.from;
    const chat = ctx.chat;

    const safeFirstName = utils.escapeMarkdown(user.first_name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ');
    const safeLastName = utils.escapeMarkdown(user.last_name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ');
    const safeUsername = user.username ? utils.escapeMarkdown(`@${user.username}`) : '–Ω–µ —É–∫–∞–∑–∞–Ω';

    const idMessage = `
üë§ *–í–∞—à–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã:*

*User ID:* \`${user.id}\`
*Chat ID:* \`${chat.id}\`
*Username:* ${safeUsername}
*–ò–º—è:* ${safeFirstName}
*–§–∞–º–∏–ª–∏—è:* ${safeLastName}

*üí° User ID* \\- –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –≤ Telegram
*üí° Chat ID* \\- ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞
*üí° Message ID:* \`${ctx.message.message_id}\`
    `.trim();

    ctx.reply(idMessage, {
      parse_mode: 'MarkdownV2',
      reply_to_message_id: ctx.message.message_id
    });
  },

  handleSetRegion: async (ctx) => {
    const region = ctx.match[1];
    userRegions.set(ctx.from.id, region);
    await ctx.editMessageText(`‚úÖ –†–µ–≥–∏–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${utils.getRegionName(region)}`);
    await ctx.answerCbQuery();
  },
  handleUnsubscribe: async (ctx) => {
    const userId = ctx.from.id;

    const unsubscribed = await subscriptionService.unsubscribeUser(userId);

    if (unsubscribed) {
      ctx.reply('‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
    } else {
      ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  },
  checkSubscription: async (ctx) => {
    const isSubscribed = await subscriptionService.isUserSubscribed(ctx.from.id);

    if (isSubscribed) {
      ctx.reply('‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É. –ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"');
    } else {
      ctx.reply('‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è');
    }
  },

};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
const adminHandlers = {
  showAdminPanel: (ctx) => {
    if (!utils.isAdmin(ctx.from.id)) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ');
    }

    ctx.reply('üõ†Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', Markup.keyboard([
      ['üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤'],
      ['üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥'],
      ['üìä –ü–æ–¥–ø–∏—Å—á–∏–∫–∏']
    ]).resize());
  },
  uploadCatalog: (ctx) => {
    if (!utils.isAdmin(ctx.from.id)) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
    }

    adminStates.set(ctx.from.id, { step: 'waiting_for_catalog_file' });
    ctx.reply('üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏. –§–æ—Ä–º–∞—Ç:\n\n' +
      '{\n' +
      '  "products": [\n' +
      '    {\n' +
      '      "sku": "–∞—Ä—Ç–∏–∫—É–ª",\n' +
      '      "name": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",\n' +
      '      "price": 100000,\n' +
      '      "urlSite": "https://...",\n' +
      '      "urlSiteImage": "https://..."\n' +
      '    }\n' +
      '  ]\n' +
      '}');
  },
  startPostCreation: (ctx) => {
    if (!utils.isAdmin(ctx.from.id)) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
    }

    adminStates.set(ctx.from.id, { step: 'waiting_for_text' });
    ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:');
  },

  handlePostText: (ctx) => {
    if (!utils.isAdmin(ctx.from.id)) return;

    const state = adminStates.get(ctx.from.id);

    if (state && state.step === 'waiting_for_text') {
      adminStates.set(ctx.from.id, {
        step: 'waiting_for_photo',
        text: ctx.message.text
      });

      ctx.reply('‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–Ω–µ—Ç" –µ—Å–ª–∏ –±–µ–∑ —Ñ–æ—Ç–æ):');
    }
    else if (state && state.step === 'waiting_for_photo') {
      if (ctx.message.text && ctx.message.text.toLowerCase() === '–Ω–µ—Ç') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é –≤–º–µ—Å—Ç–æ this.createTextPost
        createTextPost(ctx, state.text);
      }
    }
  },

  handlePhotoUpload: async (ctx) => {
    if (!utils.isAdmin(ctx.from.id)) return;

    const state = adminStates.get(ctx.from.id);

    if (state && state.step === 'waiting_for_photo') {
      const photo = ctx.message.photo[ctx.message.photo.length - 1];
      const fileId = photo.file_id;

      try {
        const newPost = await postService.createPost({
          text: state.text,
          photo: fileId,
          createdBy: ctx.from.username || ctx.from.first_name
        });

        adminStates.delete(ctx.from.id);

        ctx.replyWithPhoto(fileId, {
          caption: `‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω! –°—Ç–∞—Ç—É—Å: —á–µ—Ä–Ω–æ–≤–∏–∫\n\nID: ${newPost.id}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /publish_${newPost.id} –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏`
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ —Å —Ñ–æ—Ç–æ:', error);
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞');
      }
    }
  },

  publishPost: async (ctx, postId) => {
    console.log(`[DEBUG] publishPost called for post ID: ${postId} by user ${ctx.from.id}`);

    if (!utils.isAdmin(ctx.from.id)) {
      console.log('[DEBUG] User is not admin, access denied.');
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
    }

    const post = postService.findPost(postId);
    if (!post) {
      console.log('[DEBUG] Post not found in database.');
      return ctx.reply('‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (!CONFIG.CHANNEL_ID) {
      console.log('[DEBUG] CHANNEL_ID is not set in environment variables.');
      return ctx.reply('‚ùå CHANNEL_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É
      console.log('[DEBUG] Checking bot access to the channel...');
      try {
        const chat = await ctx.telegram.getChat(CONFIG.CHANNEL_ID);
        console.log(`[DEBUG] Success! Channel title: ${chat.title}`);
      } catch (getChatError) {
        console.error('[DEBUG] ERROR - Bot cannot access channel:', getChatError.message);
        return ctx.reply('‚ùå –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n1. –î–æ–±–∞–≤–ª–µ–Ω –ª–∏ –±–æ—Ç –≤ –∫–∞–Ω–∞–ª\n2. –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞\n3. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ CHANNEL_ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
      }

      const targetChatId = CONFIG.CHANNEL_ID;

      // –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª
      console.log(`[DEBUG] Attempting to send message to channel ID: ${targetChatId}`);
      if (post.photo) {
        console.log('[DEBUG] Sending photo post to channel...');
        await ctx.telegram.sendPhoto(targetChatId, post.photo, {
          caption: post.text,
          parse_mode: 'Markdown'
        });
      } else {
        console.log('[DEBUG] Sending text post to channel...');
        await ctx.telegram.sendMessage(targetChatId, post.text, {
          parse_mode: 'Markdown'
        });
      }
      console.log('[DEBUG] Message successfully sent to channel!');

      // –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      console.log('[DEBUG] Starting broadcast to subscribed users...');
      const subscribedUsers = await subscriptionService.getSubscribedUsers();
      console.log(`[DEBUG] Found ${subscribedUsers.length} subscribed users`);

      let successCount = 0;
      let failCount = 0;

      for (const user of subscribedUsers) {
        try {
          if (post.photo) {
            await ctx.telegram.sendPhoto(user.id, post.photo, {
              caption: post.text,
              parse_mode: 'Markdown'
            });
          } else {
            await ctx.telegram.sendMessage(user.id, post.text, {
              parse_mode: 'Markdown'
            });
          }
          successCount++;

          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
          await new Promise(resolve => setTimeout(resolve, 100));
        } catch (error) {
          console.error(`[DEBUG] Error sending to user ${user.id}:`, error.message);
          failCount++;

          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ
          if (error.response && error.response.error_code === 403) {
            await subscriptionService.unsubscribeUser(user.id);
            console.log(`[DEBUG] User ${user.id} blocked bot, unsubscribed`);
          }
        }
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å—Ç–∞
      console.log('[DEBUG] Updating post status to "published"...');
      await postService.updatePost(postId, {
        status: 'published',
        publishedAt: new Date().toISOString()
      });

      console.log('[DEBUG] Post status updated successfully.');

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É
      const reportMessage = `‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!\n\n` +
        `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:\n` +
        `‚Ä¢ –£—Å–ø–µ—à–Ω–æ: ${successCount}\n` +
        `‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: ${failCount}\n` +
        `‚Ä¢ –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${subscribedUsers.length}`;

      await ctx.reply(reportMessage);

    } catch (error) {
      console.error('[DEBUG] CATCH BLOCK - Publication error:', error);

      if (error.response) {
        console.error('[DEBUG] Telegram API error details:', error.response);

        if (error.response.error_code === 403) {
          await ctx.reply('‚ùå –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        } else if (error.response.error_code === 400) {
          await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π CHANNEL_ID –∏–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
        } else if (error.response.error_code === 429) {
          await ctx.reply('‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        } else {
          await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ Telegram API (–∫–æ–¥ ${error.response.error_code}): ${error.response.description}`);
        }
      } else {
        await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: ' + error.message);
      }
    }
  },
  deletePost: async (ctx, postId) => {
    console.log(`[DELETE] Start deletePost for ID: ${postId} by user ${ctx.from.id}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (!utils.isAdmin(ctx.from.id)) {
      console.log('[DELETE] User is not admin, access denied.');
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
    }

    try {
      console.log('[DELETE] Attempting to delete post:', postId);

      // –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ postService
      await postService.deletePost(postId);

      console.log('[DELETE] Post deleted successfully from database');
      await ctx.reply('‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!');

    } catch (error) {
      console.error('[DELETE] ERROR:', error);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É –∏–∑ postService.deletePost
      if (error.message === '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω') {
        await ctx.reply('‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      } else {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: ' + error.message);
      }
    }
  },

  showPostStats: (ctx) => {
    if (!utils.isAdmin(ctx.from.id)) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
    }

    const stats = postService.getPostStats();

    let message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤:\n\n`;
    message += `–í—Å–µ–≥–æ: ${stats.total}\n`;
    message += `–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: ${stats.published}\n`;
    message += `–ß–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: ${stats.drafts}\n\n`;
    message += `–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ—Å—Ç–æ–≤:\n`;

    const recentPosts = adminPosts.posts.slice(-5).reverse();
    recentPosts.forEach(post => {
      message += `\nüìù ID: ${post.id} - ${post.status === 'published' ? '‚úÖ' : 'üìù'} - ${new Date(post.createdAt).toLocaleDateString('ru-RU')}`;
    });

    message += `\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /view_post_[id] –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞`;

    ctx.reply(message);
  },

  viewPost: async (ctx, postId) => {
    if (!utils.isAdmin(ctx.from.id)) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
    }

    const post = postService.findPost(postId);

    if (!post) {
      return ctx.reply('‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const statusEmoji = post.status === 'published' ? '‚úÖ' : 'üìù';
    const caption = `üìù –ü–æ—Å—Ç ID: ${post.id}\n–°—Ç–∞—Ç—É—Å: ${post.status}\n–°–æ–∑–¥–∞–Ω: ${new Date(post.createdAt).toLocaleString('ru-RU')}\n–ê–≤—Ç–æ—Ä: ${post.createdBy}\n\n${post.text}`;

    if (post.photo) {
      await ctx.replyWithPhoto(post.photo, {
        caption: caption,
        reply_markup: Markup.inlineKeyboard([
          [
            Markup.button.callback('‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', `publish_${post.id}`),
            Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', `delete_${post.id}`)
          ]
        ])
      });
    } else {
      ctx.reply(caption, {
        reply_markup: Markup.inlineKeyboard([
          [
            Markup.button.callback('‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', `publish_${post.id}`),
            Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', `delete_${post.id}`)
          ]
        ])
      });
    }
  },

  handleInlinePublish: async (ctx) => {
    const postId = parseInt(ctx.match[1]);
    const post = postService.findPost(postId);

    if (!post) {
      return ctx.answerCbQuery('‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    try {
      const targetChatId = CONFIG.CHANNEL_ID;

      if (post.photo) {
        await ctx.telegram.sendPhoto(targetChatId, post.photo, {
          caption: post.text,
          parse_mode: 'Markdown'
        });
      } else {
        await ctx.telegram.sendMessage(targetChatId, post.text, {
          parse_mode: 'Markdown'
        });
      }

      await postService.updatePost(postId, {
        status: 'published',
        publishedAt: new Date().toISOString()
      });

      await ctx.editMessageText(`‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!\n\n${ctx.update.callback_query.message.text}`);
      await ctx.answerCbQuery('‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
    }
  },

  handleInlineDelete: async (ctx) => {
    const postId = parseInt(ctx.match[1]);

    try {
      await postService.deletePost(postId);
      await ctx.editMessageText('üóëÔ∏è –ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω');
      await ctx.answerCbQuery('‚úÖ –£–¥–∞–ª–µ–Ω–æ');
    } catch (error) {
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
    }
  },

  handleBroadcast: async (ctx) => {
    if (!utils.isAdmin(ctx.from.id)) return;

    const state = adminStates.get(ctx.from.id);

    if (state && state.step === 'waiting_for_broadcast') {
      const message = ctx.message.text;

      ctx.reply('‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è');

      const subscribedUsers = await subscriptionService.getSubscribedUsers();
      let successCount = 0;
      let failCount = 0;

      for (const user of subscribedUsers) {
        try {
          await ctx.telegram.sendMessage(user.id, message, {
            parse_mode: 'Markdown'
          });
          successCount++;

          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
          await new Promise(resolve => setTimeout(resolve, 100));
        } catch (error) {
          console.error(`Error sending to user ${user.id}:`, error.message);
          failCount++;

          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ
          if (error.response && error.response.error_code === 403) {
            await subscriptionService.unsubscribeUser(user.id);
          }
        }
      }

      adminStates.delete(ctx.from.id);

      const reportMessage = `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
        `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
        `‚Ä¢ –£—Å–ø–µ—à–Ω–æ: ${successCount}\n` +
        `‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: ${failCount}\n` +
        `‚Ä¢ –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${subscribedUsers.length}`;

      ctx.reply(reportMessage);
    }
  },

  showSubscriberStats: async (ctx) => {
    if (!utils.isAdmin(ctx.from.id)) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
    }

    const usersData = await subscriptionService.loadUsers();
    const totalUsers = usersData.users.length;
    const subscribedUsers = usersData.users.filter(user => user.subscribe === true).length;
    const unsubscribedUsers = totalUsers - subscribedUsers;

    let message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:\n\n`;
    message += `–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n`;
    message += `–ü–æ–¥–ø–∏—Å–∞–Ω–æ: ${subscribedUsers}\n`;
    message += `–û—Ç–ø–∏—Å–∞–Ω–æ: ${unsubscribedUsers}\n\n`;

    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const recentSubscribed = usersData.users
      .filter(user => user.subscribe)
      .sort((a, b) => new Date(b.subscribedAt || b.updatedAt) - new Date(a.subscribedAt || a.updatedAt))
      .slice(0, 5);

    if (recentSubscribed.length > 0) {
      message += `–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏:\n`;
      recentSubscribed.forEach(user => {
        const username = user.username ? `@${user.username}` : '–±–µ–∑ username';
        const date = new Date(user.subscribedAt || user.updatedAt).toLocaleDateString('ru-RU');
        message += `‚Ä¢ ${username} (${date})\n`;
      });
    }

    ctx.reply(message);
  },

};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—è–≤–æ–∫
const applicationHandlers = {
  handleApplication: async (ctx) => {
    try {
      const sku = ctx.match[1];
      const product = productService.findProductBySku(sku);

      if (!product) {
        await ctx.answerCbQuery('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      userStates.set(ctx.from.id + '_application', sku);

      await ctx.reply(
        'üìç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:',
        Markup.inlineKeyboard([
          [
            Markup.button.callback('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', 'region_petersburg'),

          ],
          [
            Markup.button.callback('–†–æ—Å—Ç–æ–≤', 'region_rostov'),
            Markup.button.callback('–°–æ—á–∏', 'region_sochi')
          ],
          [
            Markup.button.callback('–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å', 'region_simferopl'),
            Markup.button.callback('–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', 'region_ekaterinburg'),
          ],
          [
            Markup.button.callback('–ö–∞–∑–∞–Ω—å', 'region_kazan'),
            Markup.button.callback('–ú–æ—Å–∫–≤–∞', 'region_moscow'),

          ],
          [
            Markup.button.callback('üåç –î—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω', 'region_other')
          ],
        ])
      );

      await ctx.answerCbQuery();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  },

  handleRegionSelection: async (ctx) => {
    try {
      const region = ctx.match[1];
      const userId = ctx.from.id;
      const sku = userStates.get(userId + '_application');

      if (!sku) {
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }

      const product = productService.findProductBySku(sku);
      if (!product) {
        await ctx.answerCbQuery('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      userRegions.set(userId, region);

      const managerMentions = utils.getManagerMentions(region);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É –ø—Ä–æ–¥–∞–∂
      try {
        await bot.telegram.getChat(CONFIG.SALE_CHAT_ID);
      } catch (error) {
        console.error('–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –ø—Ä–æ–¥–∞–∂');
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
        return;
      }

      const user = ctx.from;
      const username = user.username ? `@${user.username}` : '–Ω–µ —É–∫–∞–∑–∞–Ω';
      const firstName = user.first_name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';

      const messageText = `
<b>üéØ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –¢–û–í–ê–†</b> 
${managerMentions}

<b>üìç –†–µ–≥–∏–æ–Ω:</b> ${utils.escapeHtml(utils.getRegionName(region))}

<b>üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:</b>
‚Ä¢ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: ${utils.escapeHtml(product.name)}
‚Ä¢ –¶–µ–Ω–∞: ${product.price.toLocaleString('ru-RU')} —Ä—É–±.
‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç–µ: ${product.urlSite}

<b>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:</b>
‚Ä¢ –ò–º—è: ${utils.escapeHtml(firstName)}
‚Ä¢ Username: ${username}

<b>üîó –°—Å—ã–ª–∫–∏ –¥–ª—è —Å–≤—è–∑–∏:</b>
${username !== '–Ω–µ —É–∫–∞–∑–∞–Ω' ? `‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram: https://t.me/${user.username}` : '‚Ä¢ Telegram: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: ${product.urlSite}

<b>‚è∞ –í—Ä–µ–º—è –∑–∞—è–≤–∫–∏:</b> ${new Date().toLocaleString('ru-RU')}
`.trim();

      const replyMarkup = {
        inline_keyboard: [
          [
            {
              text: 'üìû –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É',
              url: username !== '–Ω–µ —É–∫–∞–∑–∞–Ω' ? `https://t.me/${user.username}` : 'https://t.me/'
            },
            {
              text: 'üåê –û—Ç–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∞–π—Ç–µ',
              url: product.urlSite
            }
          ]
        ]
      };

      await bot.telegram.sendMessage(
        CONFIG.SALE_CHAT_ID,
        messageText,
        {
          parse_mode: 'HTML', // ‚Üê –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTML
          reply_markup: replyMarkup
        }
      );

      userStates.delete(userId + '_application');

      await ctx.editMessageText('‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
      await ctx.answerCbQuery();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞
function setupBotHandlers() {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
  bot.start(userHandlers.start);
  // –ü–æ–º–æ—â—å
  bot.help((ctx) => {
    ctx.reply(
      `ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n` +
      `/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n` +
      `/catalog - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤\n` +
      `/id - –ü–æ–∫–∞–∑–∞—Ç—å ID\n` +
      `/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–∞–ª–æ–≥–µ\n` +
      `/links - –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏\n\n` +
      `–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é!`
    );
  });
  bot.command('catalog', userHandlers.showCatalog);
  bot.command('admin', adminHandlers.showAdminPanel);
  bot.command('info', userHandlers.showInfo);
  bot.command('links', userHandlers.showLinks);
  bot.command('id', userHandlers.showId);
  bot.command('echo', (ctx) => {
    const message = ctx.message.text.split(' ').slice(1).join(' ');
    ctx.reply(message || 'Please provide text to echo');
  });
  bot.command('test_publish', async (ctx) => {
    try {
      console.log('–¢–µ—Å—Ç–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è...');
      await ctx.telegram.sendMessage(CONFIG.CHANNEL_ID, '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
      console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      ctx.reply('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!');
    } catch (error) {
      console.error('–¢–µ—Å—Ç failed:', error);
      ctx.reply(`‚ùå –¢–µ—Å—Ç failed: ${error.message}`);
    }
  });

  // –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏
  bot.command(/^publish_(\d+)$/, (ctx) => {
    // –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£ –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
    console.log('üü¢ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ publish_ –ó–ê–ü–£–©–ï–ù! ID:', ctx.match[1]);

    const postId = parseInt(ctx.match[1]);
    adminHandlers.publishPost(ctx, postId);
  });
  bot.command(/^view_post_(\d+)$/, (ctx) => adminHandlers.viewPost(ctx, parseInt(ctx.match[1])));
  bot.command(/^delete_post_(\d+)$/, (ctx) => {
    console.log('üü¢ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ delete_post_ –ó–ê–ü–£–©–ï–ù! ID:', ctx.match[1]);
    const postId = parseInt(ctx.match[1]);
    adminHandlers.deletePost(ctx, postId);
  });
  bot.command('upload_catalog', adminHandlers.uploadCatalog);
  bot.command('subscribers', adminHandlers.showSubscriberStats);
  // –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  bot.hears('üì¶ –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥', userHandlers.showCatalog);
  bot.hears('üåê –ù–∞—à —Å–∞–π—Ç', userHandlers.showWebsite);
  bot.hears('üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', userHandlers.showContacts);
  bot.hears('‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', userHandlers.handleUnsubscribe);



  bot.hears('üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç', adminHandlers.startPostCreation);
  bot.hears('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤', adminHandlers.showPostStats);
  bot.hears('üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥', adminHandlers.uploadCatalog);
  bot.hears('üìä –ü–æ–¥–ø–∏—Å—á–∏–∫–∏', adminHandlers.showSubscriberStats);

  // Inline –∫–Ω–æ–ø–∫–∏
  bot.action(/^prev_(\d+)$/, (ctx) => {
    const currentIndex = parseInt(ctx.match[1]);
    productService.showProduct(ctx, currentIndex - 1);
    ctx.answerCbQuery();
  });
  bot.action(/^next_(\d+)$/, (ctx) => {
    const currentIndex = parseInt(ctx.match[1]);
    productService.showProduct(ctx, currentIndex + 1);
    ctx.answerCbQuery();
  });
  bot.action(/^application_(.+)$/, (ctx) => applicationHandlers.handleApplication(ctx));
  bot.action(/^region_(.+)$/, (ctx) => applicationHandlers.handleRegionSelection(ctx));
  bot.action(/^publish_(\d+)$/, (ctx) => adminHandlers.handleInlinePublish(ctx));
  bot.action(/^delete_(\d+)$/, (ctx) => adminHandlers.handleInlineDelete(ctx));

  // Inline –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞
  bot.action(/^categories_page_(\d+)$/, (ctx) => catalogHandlers.handleCategoriesPage(ctx));
  bot.action('categories_info', (ctx) => catalogHandlers.handleCategoriesInfo(ctx));
  bot.action(/^category_(.+)_(\d+)$/, (ctx) => catalogHandlers.handleCategorySelect(ctx));
  bot.action(/^nav_(.+)_(\d+)$/, (ctx) => catalogHandlers.handleNavigation(ctx));
  bot.action('back_to_categories', (ctx) => catalogHandlers.handleBackToCategories(ctx));
  bot.action('close_catalog', (ctx) => catalogHandlers.handleCloseCatalog(ctx));
  bot.action('page_info', (ctx) => catalogHandlers.handlePageInfo(ctx));



  // Fallback
  bot.on('text', (ctx) => {
    ctx.reply('–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /catalog –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ /help –¥–ª—è –ø–æ–º–æ—â–∏');
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  bot.catch((err, ctx) => {
    console.error(`Error for ${ctx.updateType}`, err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  });


}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
  try {
    await loadPosts();
    setupBotHandlers();

    await bot.launch();

    console.log('Bot is running!');
    console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${catalogProductsData.products.length}`);
    console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: ${adminPosts.posts.length}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –ø—Ä–æ–¥–∞–∂
    if (CONFIG.SALE_CHAT_ID) {
      try {
        const chat = await bot.telegram.getChat(CONFIG.SALE_CHAT_ID);
        console.log(`‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —á–∞—Ç—É –ø—Ä–æ–¥–∞–∂: ${chat.title}`);
      } catch (error) {
        console.error('‚ùå –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –ø—Ä–æ–¥–∞–∂');
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
  }
}

// Graceful shutdown
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// –ó–∞–ø—É—Å–∫
startBot();