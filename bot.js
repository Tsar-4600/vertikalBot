// dependencies
const { Telegraf, Markup } = require('telegraf');
require('dotenv').config();
const fs = require('fs').promises;
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  ADMIN_IDS: process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => id.trim()) : [],
  BOT_API: process.env.BOT_API,
  SALE_CHAT_ID: process.env.SALE_CHAT_ID,
  CHANNEL_ID: process.env.CHANNEL_ID,
  MANAGERS: {
    'moscow': [
      {
        username: process.env.MOSCOW_MANAGER_USERNAME_1 || '@manager_msk1',
        chatId: process.env.MOSCOW_MANAGER_CHAT_ID_1
      },
    ],
    'petersburg': [
      {
        username: process.env.PETERSBURG_MANAGER_USERNAME_1 || '@manager_spb1',
        chatId: process.env.PETERSBURG_MANAGER_CHAT_ID_1
      },
    ],
    'other': [
      {
        username: process.env.GENERAL_MANAGER_USERNAME_1 || '@general_manager1',
        chatId: process.env.GENERAL_MANAGER_CHAT_ID_1
      },
    ]
  }
};

// –î–∞–Ω–Ω—ã–µ
const catalogProductsData = require('./catalogProducts');
let adminPosts = { posts: [] };

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤
async function loadPosts() {
  try {
    const postsPath = path.join(__dirname, 'post/adminPosts.json');
    const data = await fs.readFile(postsPath, 'utf8');
    adminPosts = JSON.parse(data);
  } catch (error) {
    console.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ø–æ—Å—Ç–æ–≤');
    adminPosts = { posts: [] };
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(CONFIG.BOT_API);

// –•—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
const userStates = new Map();
const userRegions = new Map();
const adminStates = new Map();

// –£—Ç–∏–ª–∏—Ç—ã
const utils = {
  escapeMarkdown: (text) => text.replace(/([_*\[\]()~`>#+\-=|{}.!])/g, '\\$1'),

  getRegionName: (regionCode) => {
    const regions = {
      'moscow': '–ú–æ—Å–∫–≤–∞ üè¢',
      'petersburg': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ üèõÔ∏è',
      'other': '–î—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω üåç'
    };
    return regions[regionCode] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω';
  },

  getManagerMentions: (region) => {
    const regionManagers = CONFIG.MANAGERS[region] || CONFIG.MANAGERS.other;
    return regionManagers.map(manager => manager.username).join(' ');
  },

  isAdmin: (userId) => CONFIG.ADMIN_IDS.includes(userId.toString())
};

// –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–∞–º–∏
const postService = {
  async savePosts() {
    try {
      const postsDir = path.join(__dirname, 'post');
      try {
        await fs.access(postsDir);
      } catch {
        await fs.mkdir(postsDir, { recursive: true });
      }

      await fs.writeFile(
        path.join(postsDir, 'adminPosts.json'),
        JSON.stringify(adminPosts, null, 2)
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å—Ç—ã');
    }
  },

  async createPost(postData) {
    const newPost = {
      id: Date.now(),
      ...postData,
      createdAt: new Date().toISOString(),
      status: 'draft'
    };

    adminPosts.posts.push(newPost);
    await this.savePosts();
    return newPost;
  },

  async updatePost(postId, updates) {
    const post = adminPosts.posts.find(p => p.id === postId);
    if (!post) throw new Error('–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');

    Object.assign(post, updates);
    await this.savePosts();
    return post;
  },
  async deletePost(postId) {
    const index = adminPosts.posts.findIndex(p => p.id === postId);
    if (index === -1) throw new Error('–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');

    adminPosts.posts.splice(index, 1);
    await this.savePosts();
  },

  getPostStats() {
    const total = adminPosts.posts.length;
    const published = adminPosts.posts.filter(p => p.status === 'published').length;
    const drafts = adminPosts.posts.filter(p => p.status === 'draft').length;

    return { total, published, drafts };
  },

  findPost(postId) {
    return adminPosts.posts.find(p => p.id === postId);
  }
};

// –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
const productService = {
  showProduct(ctx, productIndex) {
    const products = catalogProductsData.products;

    if (products.length === 0) {
      return ctx.reply('üòî –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç');
    }

    let index = productIndex;
    if (index >= products.length) index = 0;
    if (index < 0) index = products.length - 1;

    const product = products[index];
    userStates.set(ctx.from.id, index);

    const escapedName = utils.escapeMarkdown(product.name);
    const escapedSku = utils.escapeMarkdown(product.sku);

    const caption = `üèóÔ∏è *${escapedName}*\n\n` +
      `üì¶ –ê—Ä—Ç–∏–∫—É–ª: ${escapedSku}\n` +
      `üí∞ –¶–µ–Ω–∞: ${product.price.toLocaleString('ru-RU')} —Ä—É–±.\n\n` +
      `‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ`;

    const reply_markup = {
      inline_keyboard: [
        [
          { text: 'üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ', url: product.urlSite },
          { text: 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: `application_${product.sku}` }
        ],
        [
          { text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', callback_data: `prev_${index}` },
          { text: '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è', callback_data: `next_${index}` }
        ]
      ]
    };

    ctx.replyWithPhoto(product.urlSiteImage, {
      caption: caption,
      parse_mode: 'Markdown',
      reply_markup: reply_markup
    }).catch(err => {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ:', err);
      ctx.reply(caption, {
        parse_mode: 'Markdown',
        reply_markup: reply_markup
      });
    });
  },

  findProductBySku(sku) {
    return catalogProductsData.products.find(p => p.sku === sku);
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
async function createTextPost(ctx, text) {
  try {
    const newPost = await postService.createPost({
      text: text,
      createdBy: ctx.from.username || ctx.from.first_name
    });

    adminStates.delete(ctx.from.id);
    ctx.reply(`‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω (–±–µ–∑ —Ñ–æ—Ç–æ)! –°—Ç–∞—Ç—É—Å: —á–µ—Ä–Ω–æ–≤–∏–∫\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /publish_${newPost.id} –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:', error);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userHandlers = {
  start: (ctx) => {
    const userRegion = userRegions.get(ctx.from.id);
    const regionInfo = userRegion ? `\nüìç –í–∞—à —Ä–µ–≥–∏–æ–Ω: ${utils.getRegionName(userRegion)}` : '';

    const welcomeText = `üöõ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏!${regionInfo}\n\n` +
      `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–µ–π –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π.\n` +
      `–ù–∞–∂–º–∏—Ç–µ /catalog —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /region —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏–æ–Ω`;

    ctx.reply(welcomeText, Markup.keyboard([
      ['üì¶ –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥'],
      ['üåê –ù–∞—à —Å–∞–π—Ç', 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã'],
      ['üìç –°–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏–æ–Ω']
    ]).resize());
  },

  showCatalog: (ctx) => {
    productService.showProduct(ctx, 0);
  },

  showWebsite: (ctx) => {
    ctx.reply('üåê –ù–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç: https://gkvertikal.ru');
  },

  showContacts: (ctx) => {
    ctx.reply('üìû –î–ª—è —Å–≤—è–∑–∏:\n–¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\nEmail: info@gkvertikal.ru');
  },

  showRegionSelection: (ctx) => {
    ctx.reply(
      'üìç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:',
      Markup.inlineKeyboard([
        [
          Markup.button.callback('üè¢ –ú–æ—Å–∫–≤–∞', 'set_region_moscow'),
          Markup.button.callback('üèõÔ∏è –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', 'set_region_petersburg')
        ],
        [
          Markup.button.callback('üåç –î—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω', 'set_region_other')
        ]
      ])
    );
  },

  showInfo: (ctx) => {
    const productCount = catalogProductsData.products.length;
    ctx.reply(`üìä –í –∫–∞—Ç–∞–ª–æ–≥–µ: ${productCount} —Ç–æ–≤–∞—Ä–æ–≤\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /catalog –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞`);
  },

  showLinks: (ctx) => {
    ctx.reply('–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:', Markup.inlineKeyboard([
      [Markup.button.url('üåê –ù–∞—à —Å–∞–π—Ç', 'https://gkvertikal.ru')],
      [Markup.button.url('üåê –°–∞–π—Ç zoomlion', 'https://zoomlion.gkvertikal.ru')]
    ]));
  },

  showId: (ctx) => {
    const user = ctx.from;
    const chat = ctx.chat;

    const safeFirstName = utils.escapeMarkdown(user.first_name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ');
    const safeLastName = utils.escapeMarkdown(user.last_name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ');
    const safeUsername = user.username ? utils.escapeMarkdown(`@${user.username}`) : '–Ω–µ —É–∫–∞–∑–∞–Ω';

    const idMessage = `
üë§ *–í–∞—à–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã:*

*User ID:* \`${user.id}\`
*Chat ID:* \`${chat.id}\`
*Username:* ${safeUsername}
*–ò–º—è:* ${safeFirstName}
*–§–∞–º–∏–ª–∏—è:* ${safeLastName}

*üí° User ID* \\- –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –≤ Telegram
*üí° Chat ID* \\- ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞
*üí° Message ID:* \`${ctx.message.message_id}\`
    `.trim();

    ctx.reply(idMessage, {
      parse_mode: 'MarkdownV2',
      reply_to_message_id: ctx.message.message_id
    });
  },

  handleSetRegion: async (ctx) => {
    const region = ctx.match[1];
    userRegions.set(ctx.from.id, region);
    await ctx.editMessageText(`‚úÖ –†–µ–≥–∏–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${utils.getRegionName(region)}`);
    await ctx.answerCbQuery();
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
const adminHandlers = {
  showAdminPanel: (ctx) => {
    if (!utils.isAdmin(ctx.from.id)) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ');
    }

    ctx.reply('üõ†Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', Markup.keyboard([
      ['üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤'],
      ['üë• –†–∞—Å—Å—ã–ª–∫–∞', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
    ]).resize());
  },

  startPostCreation: (ctx) => {
    if (!utils.isAdmin(ctx.from.id)) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
    }

    adminStates.set(ctx.from.id, { step: 'waiting_for_text' });
    ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:');
  },

  handlePostText: (ctx) => {
    if (!utils.isAdmin(ctx.from.id)) return;

    const state = adminStates.get(ctx.from.id);

    if (state && state.step === 'waiting_for_text') {
      adminStates.set(ctx.from.id, {
        step: 'waiting_for_photo',
        text: ctx.message.text
      });

      ctx.reply('‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–Ω–µ—Ç" –µ—Å–ª–∏ –±–µ–∑ —Ñ–æ—Ç–æ):');
    }
    else if (state && state.step === 'waiting_for_photo') {
      if (ctx.message.text && ctx.message.text.toLowerCase() === '–Ω–µ—Ç') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é –≤–º–µ—Å—Ç–æ this.createTextPost
        createTextPost(ctx, state.text);
      }
    }
  },

  handlePhotoUpload: async (ctx) => {
    if (!utils.isAdmin(ctx.from.id)) return;

    const state = adminStates.get(ctx.from.id);

    if (state && state.step === 'waiting_for_photo') {
      const photo = ctx.message.photo[ctx.message.photo.length - 1];
      const fileId = photo.file_id;

      try {
        const newPost = await postService.createPost({
          text: state.text,
          photo: fileId,
          createdBy: ctx.from.username || ctx.from.first_name
        });

        adminStates.delete(ctx.from.id);

        ctx.replyWithPhoto(fileId, {
          caption: `‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω! –°—Ç–∞—Ç—É—Å: —á–µ—Ä–Ω–æ–≤–∏–∫\n\nID: ${newPost.id}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /publish_${newPost.id} –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏`
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ —Å —Ñ–æ—Ç–æ:', error);
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞');
      }
    }
  },

  publishPost: async (ctx, postId) => {
    // 1. DEBUG: –ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏
    console.log(`[DEBUG] publishPost called for post ID: ${postId} by user ${ctx.from.id}`);

    if (!utils.isAdmin(ctx.from.id)) {
      console.log('[DEBUG] User is not admin, access denied.');
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
    }
    console.log('[DEBUG] User is admin.');

    const post = postService.findPost(postId);
    if (!post) {
      console.log('[DEBUG] Post not found in database.');
      return ctx.reply('‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    console.log('[DEBUG] Post found:', { id: post.id, hasPhoto: !!post.photo, textLength: post.text.length });

    if (!CONFIG.CHANNEL_ID) {
      console.log('[DEBUG] CHANNEL_ID is not set in environment variables.');
      return ctx.reply('‚ùå CHANNEL_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    }
    console.log(`[DEBUG] CHANNEL_ID is: ${CONFIG.CHANNEL_ID}`);

    try {
      // 2. DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É
      console.log('[DEBUG] Checking bot access to the channel...');
      try {
        const chat = await ctx.telegram.getChat(CONFIG.CHANNEL_ID);
        console.log(`[DEBUG] Success! Channel title: ${chat.title}`);
      } catch (getChatError) {
        console.error('[DEBUG] ERROR - Bot cannot access channel:', getChatError.message);
        return ctx.reply('‚ùå –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n1. –î–æ–±–∞–≤–ª–µ–Ω –ª–∏ –±–æ—Ç –≤ –∫–∞–Ω–∞–ª\n2. –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞\n3. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ CHANNEL_ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
      }

      const targetChatId = CONFIG.CHANNEL_ID;

      // 3. DEBUG: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      console.log(`[DEBUG] Attempting to send message to channel ID: ${targetChatId}`);
      if (post.photo) {
        console.log('[DEBUG] Sending photo post...');
        await ctx.telegram.sendPhoto(targetChatId, post.photo, {
          caption: post.text,
          parse_mode: 'Markdown'
        });
      } else {
        console.log('[DEBUG] Sending text post...');
        await ctx.telegram.sendMessage(targetChatId, post.text, {
          parse_mode: 'Markdown'
        });
      }
      console.log('[DEBUG] Message successfully sent to channel!');

      // 4. DEBUG: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å—Ç–∞
      console.log('[DEBUG] Updating post status to "published"...');
      await postService.updatePost(postId, {
        status: 'published',
        publishedAt: new Date().toISOString()
      });
      console.log('[DEBUG] Post status updated successfully.');

      // 5. DEBUG: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É
      console.log('[DEBUG] Sending success report to admin.');
      await ctx.reply('‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!');

    } catch (error) {
      // 6. DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      console.error('[DEBUG] CATCH BLOCK - Publication error:', error);

      if (error.response) {
        console.error('[DEBUG] Telegram API error details:', error.response);

        if (error.response.error_code === 403) {
          await ctx.reply('‚ùå –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        } else if (error.response.error_code === 400) {
          await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π CHANNEL_ID –∏–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
        } else if (error.response.error_code === 429) {
          await ctx.reply('‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        } else {
          await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ Telegram API (–∫–æ–¥ ${error.response.error_code}): ${error.response.description}`);
        }
      } else {
        await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: ' + error.message);
      }
    }
  },
   deletePost: async (ctx, postId) => {
    console.log(`[DELETE] Start deletePost for ID: ${postId} by user ${ctx.from.id}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (!utils.isAdmin(ctx.from.id)) {
      console.log('[DELETE] User is not admin, access denied.');
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
    }
    
    try {
      console.log('[DELETE] Attempting to delete post:', postId);
      
      // –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ postService
      await postService.deletePost(postId);
      
      console.log('[DELETE] Post deleted successfully from database');
      await ctx.reply('‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!');
      
    } catch (error) {
      console.error('[DELETE] ERROR:', error);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É –∏–∑ postService.deletePost
      if (error.message === '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω') {
        await ctx.reply('‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      } else {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: ' + error.message);
      }
    }
  },

  showPostStats: (ctx) => {
    if (!utils.isAdmin(ctx.from.id)) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
    }

    const stats = postService.getPostStats();

    let message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤:\n\n`;
    message += `–í—Å–µ–≥–æ: ${stats.total}\n`;
    message += `–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: ${stats.published}\n`;
    message += `–ß–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: ${stats.drafts}\n\n`;
    message += `–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ—Å—Ç–æ–≤:\n`;

    const recentPosts = adminPosts.posts.slice(-5).reverse();
    recentPosts.forEach(post => {
      message += `\nüìù ID: ${post.id} - ${post.status === 'published' ? '‚úÖ' : 'üìù'} - ${new Date(post.createdAt).toLocaleDateString('ru-RU')}`;
    });

    message += `\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /view_post_[id] –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞`;

    ctx.reply(message);
  },

  viewPost: async (ctx, postId) => {
    if (!utils.isAdmin(ctx.from.id)) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
    }

    const post = postService.findPost(postId);

    if (!post) {
      return ctx.reply('‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const statusEmoji = post.status === 'published' ? '‚úÖ' : 'üìù';
    const caption = `üìù –ü–æ—Å—Ç ID: ${post.id}\n–°—Ç–∞—Ç—É—Å: ${post.status}\n–°–æ–∑–¥–∞–Ω: ${new Date(post.createdAt).toLocaleString('ru-RU')}\n–ê–≤—Ç–æ—Ä: ${post.createdBy}\n\n${post.text}`;

    if (post.photo) {
      await ctx.replyWithPhoto(post.photo, {
        caption: caption,
        reply_markup: Markup.inlineKeyboard([
          [
            Markup.button.callback('‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', `publish_${post.id}`),
            Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', `delete_${post.id}`)
          ]
        ])
      });
    } else {
      ctx.reply(caption, {
        reply_markup: Markup.inlineKeyboard([
          [
            Markup.button.callback('‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', `publish_${post.id}`),
            Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', `delete_${post.id}`)
          ]
        ])
      });
    }
  },

  handleInlinePublish: async (ctx) => {
    const postId = parseInt(ctx.match[1]);
    const post = postService.findPost(postId);

    if (!post) {
      return ctx.answerCbQuery('‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    try {
      const targetChatId = CONFIG.CHANNEL_ID;

      if (post.photo) {
        await ctx.telegram.sendPhoto(targetChatId, post.photo, {
          caption: post.text,
          parse_mode: 'Markdown'
        });
      } else {
        await ctx.telegram.sendMessage(targetChatId, post.text, {
          parse_mode: 'Markdown'
        });
      }

      await postService.updatePost(postId, {
        status: 'published',
        publishedAt: new Date().toISOString()
      });

      await ctx.editMessageText(`‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!\n\n${ctx.update.callback_query.message.text}`);
      await ctx.answerCbQuery('‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
    }
  },

  handleInlineDelete: async (ctx) => {
    const postId = parseInt(ctx.match[1]);

    try {
      await postService.deletePost(postId);
      await ctx.editMessageText('üóëÔ∏è –ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω');
      await ctx.answerCbQuery('‚úÖ –£–¥–∞–ª–µ–Ω–æ');
    } catch (error) {
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
    }
  },

  startBroadcast: (ctx) => {
    if (!utils.isAdmin(ctx.from.id)) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
    }

    adminStates.set(ctx.from.id, { step: 'waiting_for_broadcast' });
    ctx.reply('üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:');
  },

  handleBroadcast: (ctx) => {
    if (!utils.isAdmin(ctx.from.id)) return;

    const state = adminStates.get(ctx.from.id);

    if (state && state.step === 'waiting_for_broadcast') {
      ctx.reply('‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è');
      // –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –±—É–¥–µ—Ç –∑–¥–µ—Å—å
      adminStates.delete(ctx.from.id);
      ctx.reply('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—è–≤–æ–∫
const applicationHandlers = {
  handleApplication: async (ctx) => {
    try {
      const sku = ctx.match[1];
      const product = productService.findProductBySku(sku);

      if (!product) {
        await ctx.answerCbQuery('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      userStates.set(ctx.from.id + '_application', sku);

      await ctx.reply(
        'üìç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:',
        Markup.inlineKeyboard([
          [
            Markup.button.callback('üè¢ –ú–æ—Å–∫–≤–∞', 'region_moscow'),
            Markup.button.callback('üèõÔ∏è –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', 'region_petersburg')
          ],
          [
            Markup.button.callback('üåç –î—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω', 'region_other')
          ]
        ])
      );

      await ctx.answerCbQuery();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  },

  handleRegionSelection: async (ctx) => {
    try {
      const region = ctx.match[1];
      const userId = ctx.from.id;
      const sku = userStates.get(userId + '_application');

      if (!sku) {
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }

      const product = productService.findProductBySku(sku);
      if (!product) {
        await ctx.answerCbQuery('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      userRegions.set(userId, region);

      const managerMentions = utils.getManagerMentions(region);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É –ø—Ä–æ–¥–∞–∂
      try {
        await bot.telegram.getChat(CONFIG.SALE_CHAT_ID);
      } catch (error) {
        console.error('–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –ø—Ä–æ–¥–∞–∂');
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
        return;
      }

      const user = ctx.from;
      const username = user.username ? `@${user.username}` : '–Ω–µ —É–∫–∞–∑–∞–Ω';
      const firstName = user.first_name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';

      const messageText = `
üéØ *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –¢–û–í–ê–†* 
${managerMentions}

*üìç –†–µ–≥–∏–æ–Ω:* ${utils.getRegionName(region)}

*üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:*
‚Ä¢ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: ${utils.escapeMarkdown(product.name)}
‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª: ${utils.escapeMarkdown(product.sku)}
‚Ä¢ –¶–µ–Ω–∞: ${product.price.toLocaleString('ru-RU')} —Ä—É–±.
‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç–µ: ${product.urlSite}

*üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:*
‚Ä¢ –ò–º—è: ${utils.escapeMarkdown(firstName)}
‚Ä¢ Username: ${username}
‚Ä¢ User ID: ${user.id}

*üîó –°—Å—ã–ª–∫–∏ –¥–ª—è —Å–≤—è–∑–∏:*
${username !== '–Ω–µ —É–∫–∞–∑–∞–Ω' ? `‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram: https://t.me/${user.username}` : '‚Ä¢ Telegram: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: ${product.urlSite}

*‚è∞ –í—Ä–µ–º—è –∑–∞—è–≤–∫–∏:* ${new Date().toLocaleString('ru-RU')}
      `.trim();

      const replyMarkup = {
        inline_keyboard: [
          [
            {
              text: 'üìû –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É',
              url: username !== '–Ω–µ —É–∫–∞–∑–∞–Ω' ? `https://t.me/${user.username}` : 'https://t.me/'
            },
            {
              text: 'üåê –û—Ç–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∞–π—Ç–µ',
              url: product.urlSite
            }
          ]
        ]
      };

      await bot.telegram.sendMessage(
        CONFIG.SALE_CHAT_ID,
        messageText,
        {
          parse_mode: 'Markdown',
          reply_markup: replyMarkup
        }
      );

      userStates.delete(userId + '_application');

      await ctx.editMessageText('‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
      await ctx.answerCbQuery();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞
function setupBotHandlers() {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
  bot.start(userHandlers.start);
  bot.command('catalog', userHandlers.showCatalog);
  bot.command('admin', adminHandlers.showAdminPanel);
  bot.command('region', userHandlers.showRegionSelection);
  bot.command('info', userHandlers.showInfo);
  bot.command('links', userHandlers.showLinks);
  bot.command('id', userHandlers.showId);
  bot.command('echo', (ctx) => {
    const message = ctx.message.text.split(' ').slice(1).join(' ');
    ctx.reply(message || 'Please provide text to echo');
  });
  bot.command('test_publish', async (ctx) => {
    try {
      console.log('–¢–µ—Å—Ç–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è...');
      await ctx.telegram.sendMessage(CONFIG.CHANNEL_ID, '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
      console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      ctx.reply('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!');
    } catch (error) {
      console.error('–¢–µ—Å—Ç failed:', error);
      ctx.reply(`‚ùå –¢–µ—Å—Ç failed: ${error.message}`);
    }
  });

  // –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏
  bot.command(/^publish_(\d+)$/, (ctx) => {
    // –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£ –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
    console.log('üü¢ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ publish_ –ó–ê–ü–£–©–ï–ù! ID:', ctx.match[1]);

    const postId = parseInt(ctx.match[1]);
    adminHandlers.publishPost(ctx, postId);
  });
  bot.command(/^view_post_(\d+)$/, (ctx) => adminHandlers.viewPost(ctx, parseInt(ctx.match[1])));
  bot.command(/^delete_post_(\d+)$/, (ctx) => {
    console.log('üü¢ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ delete_post_ –ó–ê–ü–£–©–ï–ù! ID:', ctx.match[1]);
    const postId = parseInt(ctx.match[1]);
    adminHandlers.deletePost(ctx, postId);
  });
  // –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  bot.hears('üì¶ –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥', userHandlers.showCatalog);
  bot.hears('üåê –ù–∞—à —Å–∞–π—Ç', userHandlers.showWebsite);
  bot.hears('üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', userHandlers.showContacts);
  bot.hears('üìç –°–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏–æ–Ω', userHandlers.showRegionSelection);



  bot.hears('üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç', adminHandlers.startPostCreation);
  bot.hears('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤', adminHandlers.showPostStats);
  bot.hears('üë• –†–∞—Å—Å—ã–ª–∫–∞', adminHandlers.startBroadcast);

  // Inline –∫–Ω–æ–ø–∫–∏
  bot.action(/^set_region_(.+)$/, (ctx) => userHandlers.handleSetRegion(ctx));
  bot.action(/^prev_(\d+)$/, (ctx) => {
    const currentIndex = parseInt(ctx.match[1]);
    productService.showProduct(ctx, currentIndex - 1);
    ctx.answerCbQuery();
  });
  bot.action(/^next_(\d+)$/, (ctx) => {
    const currentIndex = parseInt(ctx.match[1]);
    productService.showProduct(ctx, currentIndex + 1);
    ctx.answerCbQuery();
  });
  bot.action(/^application_(.+)$/, (ctx) => applicationHandlers.handleApplication(ctx));
  bot.action(/^region_(.+)$/, (ctx) => applicationHandlers.handleRegionSelection(ctx));
  bot.action(/^publish_(\d+)$/, (ctx) => adminHandlers.handleInlinePublish(ctx));
  bot.action(/^delete_(\d+)$/, (ctx) => adminHandlers.handleInlineDelete(ctx));

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤

  bot.on('text', (ctx) => adminHandlers.handlePostText(ctx));
  bot.on('text', (ctx) => adminHandlers.handleBroadcast(ctx));
  bot.on('photo', (ctx) => adminHandlers.handlePhotoUpload(ctx));


  // Fallback
  bot.on('text', (ctx) => {
    ctx.reply('–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /catalog –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ /help –¥–ª—è –ø–æ–º–æ—â–∏');
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  bot.catch((err, ctx) => {
    console.error(`Error for ${ctx.updateType}`, err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  });

  // –ü–æ–º–æ—â—å
  bot.help((ctx) => {
    ctx.reply(
      `ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n` +
      `/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n` +
      `/catalog - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤\n` +
      `/region - –°–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏–æ–Ω\n` +
      `/id - –ü–æ–∫–∞–∑–∞—Ç—å ID\n` +
      `/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–∞–ª–æ–≥–µ\n` +
      `/links - –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏\n\n` +
      `–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é!`
    );
  });
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
  try {
    await loadPosts();
    setupBotHandlers();

    await bot.launch();

    console.log('Bot is running!');
    console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${catalogProductsData.products.length}`);
    console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: ${adminPosts.posts.length}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –ø—Ä–æ–¥–∞–∂
    if (CONFIG.SALE_CHAT_ID) {
      try {
        const chat = await bot.telegram.getChat(CONFIG.SALE_CHAT_ID);
        console.log(`‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —á–∞—Ç—É –ø—Ä–æ–¥–∞–∂: ${chat.title}`);
      } catch (error) {
        console.error('‚ùå –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –ø—Ä–æ–¥–∞–∂');
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
  }
}

// Graceful shutdown
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// –ó–∞–ø—É—Å–∫
startBot();